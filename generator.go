package main

import (
	"bytes"
	"fmt"

	"github.com/golang/protobuf/proto"
	"github.com/golang/protobuf/protoc-gen-go/descriptor"
	plugin "github.com/golang/protobuf/protoc-gen-go/plugin"
)

type generator struct {
	Request  *plugin.CodeGeneratorRequest
	Response *plugin.CodeGeneratorResponse

	output *bytes.Buffer
	indent string
}

func newGenerator(req *plugin.CodeGeneratorRequest) *generator {
	return &generator{
		Request:  req,
		Response: nil,
		output:   bytes.NewBuffer(nil),
		indent:   "",
	}
}

func (g *generator) Generate() error {
	g.Response = &plugin.CodeGeneratorResponse{}

	for _, file := range g.getProtoFiles() {
		err := g.processFile(file)
		if err != nil {
			return err
		}
	}

	return nil
}

func (g *generator) processFile(file *descriptor.FileDescriptorProto) error {
	if file.Options.GetJavaGenericServices() {
		return fmt.Errorf("twirp_java_jaxrs cannot not work with java_generic_services option")
	}

	for _, service := range file.GetService() {
		out := g.generateServiceInterface(file, service)
		g.Response.File = append(g.Response.File, out)

		out = g.generateServiceClient(file, service)
		g.Response.File = append(g.Response.File, out)
	}

	return nil
}

func (g *generator) generateServiceClient(file *descriptor.FileDescriptorProto, service *descriptor.ServiceDescriptorProto) *plugin.CodeGeneratorResponse_File {
	multi := file.Options.GetJavaMultipleFiles()

	if multi {
		pkg := getJavaPackage(file)
		g.P(`// Code generated by protoc-gen-twirp_java_jaxrs, DO NOT EDIT.`)
		g.P(`// source: `, file.GetName())
		g.P()
		if pkg != "" {
			g.P(`package `, pkg, `;`)
			g.P()
		}
	}

	// TODO add comment

	serviceClass := getJavaServiceClientClassName(file, service)
	servicePath := g.getServicePath(file, service)
	interfaceClass := getJavaType(file, getJavaServiceClassName(file, service))

	static := ""
	if !multi {
		static = "static "
	}
	g.P(`public `, static, `class `, serviceClass, ` implements `, interfaceClass, ` {`)
	g.P(`  private static final String PATH = "/twirp/`, servicePath, `";`)
	g.P(`  private final javax.ws.rs.client.WebTarget target;`)
	g.P()
	g.P(`  public `, serviceClass, `(javax.ws.rs.client.WebTarget target) {`)
	g.P(`    this.target = target;`)
	g.P(`  }`)
	g.P()
	g.P(`  private <T> T _parseSafely(java.io.InputStream input, FunctionE<java.io.InputStream, T> fn) {`)
	g.P(`    try {`)
	g.P(`      return fn.apply(input);`)
	g.P(`    } catch (Exception e) {`)
	g.P(`      throw new RuntimeException(e);`)
	g.P(`    }`)
	g.P(`  }`)
	g.P()
	g.P(`  @FunctionalInterface`)
	g.P(`  interface FunctionE<A, B> {`)
	g.P(`    B apply(A input) throws Exception;`)
	g.P(`  }`)
	g.P()
	g.P(`  private <R> R _call(String path, com.google.protobuf.MessageLite request, java.util.function.Function<java.io.InputStream, R> parser) {`)
	g.P(`    javax.ws.rs.core.Response response = target.path(path)`)
	g.P(`        .request("application/protobuf")`)
	g.P(`        .post(javax.ws.rs.client.Entity.entity((javax.ws.rs.core.StreamingOutput) request::writeTo, "application/protobuf"));`)
	g.P(`    java.io.InputStream body = response.readEntity(java.io.InputStream.class);`)
	g.P(`    return parser.apply(body);`)
	g.P(`  }`)

	for _, method := range service.GetMethod() {
		inputType := getJavaType(file, method.GetInputType())
		outputType := getJavaType(file, method.GetOutputType())
		methodName := lowerCamelCase(method.GetName())
		methodPath := camelCase(method.GetName())

		g.P()
		// add comment
		g.P(`  @Override`)
		g.P(`  public `, outputType, ` `, methodName, `(`, inputType, ` request) {`)
		g.P(`    java.util.function.Function<java.io.InputStream, `, outputType, `> parser =`)
		g.P(`        (input) -> _parseSafely(input, `, outputType, `::parseFrom);`)
		g.P(`    return _call(PATH + "/`, methodPath, `", request, parser);`)
		g.P(`  }`)
	}

	g.P(`}`)
	g.P()

	out := &plugin.CodeGeneratorResponse_File{}
	out.Content = proto.String(g.output.String())
	if multi {
		out.Name = proto.String(getJavaServiceClientClassFile(file, service))
	} else {
		out.Name = proto.String(getJavaOuterClassFile(file))
		out.InsertionPoint = proto.String("outer_class_scope")
	}
	g.Reset()

	return out
}

func (g *generator) generateServiceInterface(file *descriptor.FileDescriptorProto, service *descriptor.ServiceDescriptorProto) *plugin.CodeGeneratorResponse_File {
	// TODO add comment

	serviceClass := getJavaServiceClassName(file, service)
	multi := file.Options.GetJavaMultipleFiles()

	if multi {
		pkg := getJavaPackage(file)
		g.P(`// Code generated by protoc-gen-twirp_java_jaxrs, DO NOT EDIT.`)
		g.P(`// source: `, file.GetName())
		g.P()
		if pkg != "" {
			g.P(`package `, pkg, `;`)
			g.P()
		}
	}

	g.P(`public interface `, serviceClass, ` {`)

	for _, method := range service.GetMethod() {
		inputType := getJavaType(file, method.GetInputType())
		outputType := getJavaType(file, method.GetOutputType())
		methodName := lowerCamelCase(method.GetName())

		// add comment
		g.P(`  `, outputType, ` `, methodName, `(`, inputType, ` request);`)
	}

	g.P(`}`)
	g.P()

	out := &plugin.CodeGeneratorResponse_File{}
	out.Content = proto.String(g.output.String())

	if multi {
		out.Name = proto.String(getJavaServiceClassFile(file, service))
	} else {
		out.Name = proto.String(getJavaOuterClassFile(file))
		out.InsertionPoint = proto.String("outer_class_scope")
	}
	g.Reset()

	return out
}

func (g *generator) Reset() {
	g.indent = ""
	g.output.Reset()
}

func (g *generator) In() {
	g.indent += "  "
}

func (g *generator) Out() {
	g.indent = g.indent[2:]
}

func (g *generator) P(str ...string) {
	for _, v := range str {
		g.output.WriteString(v)
	}
	g.output.WriteByte('\n')
}

func (g *generator) getProtoFiles() []*descriptor.FileDescriptorProto {
	files := make([]*descriptor.FileDescriptorProto, 0)
	for _, fname := range g.Request.GetFileToGenerate() {
		for _, proto := range g.Request.GetProtoFile() {
			if proto.GetName() == fname {
				files = append(files, proto)
			}
		}
	}
	return files
}

func (g *generator) getServicePath(file *descriptor.FileDescriptorProto, service *descriptor.ServiceDescriptorProto) string {
	name := camelCase(service.GetName())
	pkg := file.GetPackage()
	if pkg != "" {
		name = pkg + "." + name
	}
	return name
}
